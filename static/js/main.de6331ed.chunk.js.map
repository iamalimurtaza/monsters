{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","href","CardList","monsters","map","monster","key","SearchBox","onSearchChange","type","placeholder","onInput","App","onSearchInput","e","setState","searchField","target","value","state","fetch","then","Response","json","users","filteredMonsters","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAYeA,G,MATF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,yBAAKC,UAAU,QACd,yBAAKC,IAAG,+BAA0BJ,EAA1B,0BAAsDK,IAAKJ,IACnE,4BAAKA,GACL,uBAAGK,KAAI,kBAAaJ,IAAUA,MCMlBK,G,MAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACC,yBAAKL,UAAU,YACbK,EAASC,KAAI,SAACC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAQV,GAAIA,GAAIU,EAAQV,GAAIC,KAAMS,EAAQT,KAAMC,MAAOQ,EAAQR,cCGtEU,G,MARG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACpB,OACC,6BACC,2BAAOV,UAAU,SAASW,KAAK,SAASb,KAAK,SAASc,YAAY,kBAAkBC,QAASH,OCkCjFI,G,wDAlCd,aAAe,IAAD,8BACb,gBAODC,cAAgB,SAACC,GAChB,OAAO,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAP7C,EAAKC,MAAQ,CACZhB,SAAU,GACVa,YAAa,IAJD,E,gEAYO,IAAD,OACnBI,MAAM,8CAA8CC,MAAK,SAACC,GACzDA,EAASC,OAAOF,MAAK,SAACG,GACrB,OAAO,EAAKT,SAAS,CAAEZ,SAAUqB,Y,+BAK1B,IAAD,OACFC,EAAmBC,KAAKP,MAAMhB,SAASwB,QAAO,SAACtB,GACpD,OAAOA,EAAQT,KAAKgC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEnE,OACC,yBAAK9B,UAAU,OACd,gDACA,kBAAC,EAAD,CAAWU,eAAgBkB,KAAKb,gBAChC,kBAAC,EAAD,CAAUV,SAAUsB,S,GA7BNK,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de6331ed.chunk.js","sourcesContent":["import React from 'react';\nimport '../containers/Card.css';\n\nconst Card = ({ id, name, email }) => {\n\treturn (\n\t\t<div className='Card'>\n\t\t\t<img src={`https://robohash.org/${id}?set=set2&size=180x220`} alt={name} />\n\t\t\t<h2>{name}</h2>\n\t\t\t<a href={`mailto: ${email}`}>{email}</a>\n\t\t</div>\n\t);\n};\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport '../containers/CardList.css';\n\nconst CardList = ({ monsters }) => {\n\treturn (\n\t\t<div className='CardList'>\n\t\t\t{monsters.map((monster) => {\n\t\t\t\treturn <Card key={monster.id} id={monster.id} name={monster.name} email={monster.email} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\nimport '../containers/SearchBox.css';\n\nconst SearchBox = ({ onSearchChange }) => {\n\treturn (\n\t\t<div>\n\t\t\t<input className='search' type='search' name='search' placeholder='Search monsters' onInput={onSearchChange} />\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport './containers/App.css';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tonSearchInput = (e) => {\n\t\treturn this.setState({ searchField: e.target.value });\n\t};\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then((Response) => {\n\t\t\tResponse.json().then((users) => {\n\t\t\t\treturn this.setState({ monsters: users });\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tconst filteredMonsters = this.state.monsters.filter((monster) => {\n\t\t\treturn monster.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n\t\t});\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBox onSearchChange={this.onSearchInput} />\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}